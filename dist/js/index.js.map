{"version":3,"file":"index.js","mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,WAAY,GAAIH,GACG,iBAAZC,QACdA,QAAkB,SAAID,IAEtBD,EAAe,SAAIC,GACpB,CATD,CASGK,MAAM,I,mBCRT,IAAIC,EAAsB,CCA1BA,EAAwB,CAACL,EAASM,KACjC,IAAI,IAAIC,KAAOD,EACXD,EAAoBG,EAAEF,EAAYC,KAASF,EAAoBG,EAAER,EAASO,IAC5EE,OAAOC,eAAeV,EAASO,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDF,EAAwB,CAACQ,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFT,EAAyBL,IACH,oBAAXkB,QAA0BA,OAAOC,aAC1CV,OAAOC,eAAeV,EAASkB,OAAOC,YAAa,CAAEC,MAAO,WAE7DX,OAAOC,eAAeV,EAAS,aAAc,CAAEoB,OAAO,GAAO,G,u9BCJ9D,IAaIC,EACAC,EAdEC,EAAiB,CACnBC,WAAY,CACRC,aAAc,YAEdC,SAAU,qBAKZC,EAAQ,CACVC,KAAM,CAAC,GAKLC,EAAe,GAqDrB,SAASC,IAIP,IAHEC,EAAWC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAGV,EAAQE,WAAWC,aACjCU,EAAYH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GACfI,EAAWJ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,MAERK,EAAU,GAKVC,EAAW,CAEbC,IAAKA,IAAOlB,EAAMmB,MAAMF,SAAW,SAEnCG,OAAQA,IAAOpB,EAAMmB,MAAMF,SAAWX,EAAMC,KAAKU,UAE/CI,EACqB,iBAAhBX,EACDA,EACAY,SAASC,cAAcb,GAEZ,KAAjBI,GACAE,EAAQQ,KAAKV,GAGG,WAAhBC,GACA3B,OAAOqC,KAAKJ,EAASK,SAASC,SAAS,sBAGvCX,EAAQQ,QAAQH,EAASK,QAAQE,kBAAkBC,MAAM,MAK7DZ,EAASF,KACTM,EAASS,UAAUf,MAAgBC,GACnCK,EA9Be,CACXH,IAAK,YACLE,OAAQ,SA4BIL,KACpB,CCxGA,QDiBwB,CACpBgB,KAAM,WAAwC,IAA9BC,EAAWrB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAGT,EAC1BD,EAAOgC,EAAAA,EAAA,GACA/B,GACA8B,GAGP,IAAQ5B,aAAc8B,EAAmB7B,SAAU8B,GAC/ClC,EAAQE,WAOZ,IAAK,IAAMiC,KANXpC,EAAQsB,SAASC,cAAc,QAC/BjB,EAAMC,KAAKU,SAAWjB,EAAMmB,MAAMF,SAClCT,EAAagB,QAAQF,SAASe,iBAAiBF,IAI7B3B,GACd4B,EAAIE,iBAAiB,SAAUC,IAC3B9B,EAAO8B,EAAEC,OAAOC,QAAQP,GAAoB,GAAI,SAAS,GAgBrE,EAEAQ,KAAM,SAAChC,GAA8B,OAAKD,EAAOC,EAAjBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GAAwC,EAG3EgC,MAAO,SAACjC,GAA8B,OAClCD,EAAOC,EADsBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GACE,SAAS,G","sources":["webpack://ModalsJS/webpack/universalModuleDefinition","webpack://ModalsJS/webpack/bootstrap","webpack://ModalsJS/webpack/runtime/define property getters","webpack://ModalsJS/webpack/runtime/hasOwnProperty shorthand","webpack://ModalsJS/webpack/runtime/make namespace object","webpack://ModalsJS/./src/modals.js","webpack://ModalsJS/./src/index.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"ModalsJS\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ModalsJS\"] = factory();\n\telse\n\t\troot[\"ModalsJS\"] = factory();\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// User may override these on init()\nconst defaultOptions = {\n    classNames: {\n        dialogWindow: '.modalsJS',\n        // background: '.modalsJS__background',\n        btnClose: '.modalsJS__close',\n    },\n};\n\n// Used to restore any previous overflow related styles on the body tag.\nconst store = {\n    body: {},\n};\n\nlet $body; // BODY element (see `store` object)\nlet options; // options object (see defaultOptions)\nconst closeButtons = []; // array of close button elements\n// let $dialogBG; // background element for modals\n\nexport const ModalsJS = {\n    init: function (userOptions = defaultOptions) {\n        options = {\n            ...defaultOptions,\n            ...userOptions,\n        };\n\n        const { dialogWindow: dialogWindowClass, btnClose: btnCloseClass } =\n            options.classNames;\n        $body = document.querySelector('body');\n        store.body.overflow = $body.style.overflow;\n        closeButtons.push(...document.querySelectorAll(btnCloseClass));\n        // $dialogBG = document.querySelector(options.classNames.background);\n\n        // Close Button handler\n        for (const $el of closeButtons) {\n            $el.addEventListener('click', (e) => {\n                toggle(e.target.closest(dialogWindowClass), '', 'remove');\n            });\n        }\n\n        // Background click handler for ALL modals\n        // $dialogBG.addEventListener('click', () => {\n        //     for (const $el of closeButtons) {\n        //         if (\n        //             $el\n        //                 .closest(dialogWindowClass)\n        //                 .classList.contains(options.classNames.active)\n        //         ) {\n        //             toggle($el.closest(dialogWindowClass), '', 'remove');\n        //         }\n        //     }\n        // });\n    },\n\n    open: (targetModal, extraClasses = '') => toggle(targetModal, extraClasses),\n\n    // Gives the user the option to close a modal with other controls.\n    close: (targetModal, extraClasses = '') =>\n        toggle(targetModal, extraClasses, 'remove'),\n};\n\n/**\n * @private\n * @param {string | HTMLElement} targetModal - either the query selector or the\n *   element itself. Defaults to `options.classNames.dialogWindow`.\n * @param {string} extraClasses - comma separated list of additional classes to\n *   add or remove\n * @param {string} addOrRemove - \"add\" or \"remove\" to open or close the modal\n */\nfunction toggle(\n    targetModal = options.classNames.dialogWindow,\n    extraClasses = '',\n    addOrRemove = 'add'\n) {\n    const classes = [];\n    const method = {\n        add: 'showModal',\n        remove: 'close',\n    };\n    const overflow = {\n        // Prevent background scrolling\n        add: () => ($body.style.overflow = 'hidden'),\n        // Restore prev overflow styles\n        remove: () => ($body.style.overflow = store.body.overflow),\n    };\n    const $modalEl =\n        typeof targetModal !== 'string'\n            ? targetModal\n            : document.querySelector(targetModal);\n\n    if (extraClasses !== '') {\n        classes.push(extraClasses);\n    }\n    if (\n        addOrRemove === 'remove' &&\n        Object.keys($modalEl.dataset).includes('modalResetClasses')\n    ) {\n        // TODO: I hate this, make this better for the user than using dataset\n        classes.push(...$modalEl.dataset.modalResetClasses.split(','));\n    }\n\n    // Toggle overflow, modal, and extra classes\n    // $dialogBG.classList[addOrRemove](options.classNames.active);\n    overflow[addOrRemove]();\n    $modalEl.classList[addOrRemove](...classes);\n    $modalEl[method[addOrRemove]]();\n}\n","import { ModalsJS } from './modals.js';\r\n\r\nexport default ModalsJS;\r\n"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","$body","options","defaultOptions","classNames","dialogWindow","btnClose","store","body","closeButtons","toggle","targetModal","arguments","length","undefined","extraClasses","addOrRemove","classes","overflow","add","style","remove","$modalEl","document","querySelector","push","keys","dataset","includes","modalResetClasses","split","classList","init","userOptions","_objectSpread","dialogWindowClass","btnCloseClass","$el","querySelectorAll","addEventListener","e","target","closest","open","close"],"sourceRoot":""}